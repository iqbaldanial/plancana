generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Crop {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  stages      CropStage[]
}

model CropStage {
  id       Int     @id @default(autoincrement())
  crop     Crop    @relation(fields: [cropId], references: [id])
  cropId   Int
  role     String  // "farmer", "processor", "distributor"
  lat      Float
  lng      Float
  order    Int     // 0 = farmer, 1 = processor, etc
  weather  Weather[]
}

model Weather {
  id           Int        @id @default(autoincrement())
  cropStage    CropStage  @relation(fields: [cropStageId], references: [id])
  cropStageId  Int
  temperature  Float
  main         String     
  description  String
  humidity     Int
  windSpeed    Float
  recordedAt   DateTime   @default(now())
}